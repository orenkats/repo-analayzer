=== File: backend/UserApi/Application/DTOs/UserDto.cs ===
namespace UserApi.Application.DTOs;

public class UserDto
{
    public Guid Id { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string Email { get; set; }
    public DateTime DateOfBirth { get; set; }
    public string Phone { get; set; }
    public string Address { get; set; }
    public string ProfilePicture { get; set; }
}


=== File: backend/UserApi/Application/Interfaces/IUserRepository.cs ===
using UserApi.Domain.Entities;

namespace UserApi.Application.Interfaces;

public interface IUserRepository
{
    Task<IEnumerable<User>> GetUsersAsync(int page, int pageSize);
    Task<User> GetUserByIdAsync(Guid id);
    Task<IEnumerable<User>> SearchUsersAsync(string query);
    Task<int> GetTotalUserCountAsync();
    Task SaveUsersAsync(IEnumerable<User> users);
}


=== File: backend/UserApi/Application/Interfaces/IUserService.cs ===
using UserApi.Domain.Entities;
using UserApi.Application.DTOs;
namespace UserApi.Application.Interfaces;

// File: Application/Interfaces/IUserService.cs
public interface IUserService
{
    Task<IEnumerable<User>> GetUsersAsync(int page, int pageSize);
    Task<User> GetUserByIdAsync(Guid id);
    Task<IEnumerable<User>> SearchUsersAsync(string query);
    Task FetchAndSaveUsersAsync(int count); // Add this method here
    Task<PaginatedResponseDto<UserDto>> GetPaginatedUsersAsync(int page, int pageSize);
}




=== File: backend/UserApi/Application/Services/UserService.cs ===
using Newtonsoft.Json;
using UserApi.Application.Interfaces;
using UserApi.Application.DTOs;
using UserApi.Domain.Entities;
using UserApi.Domain.Models;

namespace UserApi.Application.Services
{
    public class UserService : IUserService
    {
        private readonly IUserRepository _repository;
        private readonly HttpClient _httpClient;
        private readonly string? _apiUrl;
        private readonly ILogger<UserService> _logger;

        public UserService(IUserRepository repository, HttpClient httpClient, IConfiguration configuration, ILogger<UserService> logger)
        {
            _repository = repository;
            _httpClient = httpClient;
            _apiUrl = configuration["ExternalApi:RandomUserUrl"];
            _logger = logger;
        }

        public async Task<IEnumerable<User>> GetUsersAsync(int page, int pageSize)
        {
            
            var totalUserCount = await _repository.GetTotalUserCountAsync();
    
            // Check if external API fetch is needed
            if (totalUserCount == 0 || (page - 1) * pageSize >= totalUserCount)
            {
                await FetchAndSaveUsersAsync(20);
            }

            var users = await _repository.GetUsersAsync(page, pageSize);

            return users;
        }

        public async Task<User> GetUserByIdAsync(Guid id)
        {
            return await _repository.GetUserByIdAsync(id);
        }

        public async Task<IEnumerable<User>> SearchUsersAsync(string query)
        {
            return await _repository.SearchUsersAsync(query);
        }

        public async Task FetchAndSaveUsersAsync(int count)
        {
        
            var response = await _httpClient.GetStringAsync($"{_apiUrl}?results={count}");
            var apiResponse = JsonConvert.DeserializeObject<UserApiResponse>(response);

            if (apiResponse?.Results == null || !apiResponse.Results.Any())
            {
                return;
            }

            var users = apiResponse.Results.Select(apiUser => new User
            {
                Id = Guid.NewGuid(),
                FirstName = apiUser.Name.First,
                LastName = apiUser.Name.Last,
                Email = apiUser.Email,
                DateOfBirth = DateTime.Parse(apiUser.Dob.Date),
                Phone = apiUser.Phone,
                Address = $"{apiUser.Location.City}, {apiUser.Location.State}",
                ProfilePicture = apiUser.Picture.Large
            }).ToList();

            await _repository.SaveUsersAsync(users);
           
        }

        public async Task<PaginatedResponseDto<UserDto>> GetPaginatedUsersAsync(int page, int pageSize)
        {
        
            // Use this.GetUsersAsync to avoid circular dependency
            var users = await GetUsersAsync(page, pageSize);
            var totalCount = await _repository.GetTotalUserCountAsync();

            return new PaginatedResponseDto<UserDto>
            {
                Results = users.Select(u => new UserDto
                {
                    Id = u.Id,
                    FirstName = u.FirstName,
                    LastName = u.LastName,
                    Email = u.Email,
                    DateOfBirth = u.DateOfBirth ?? DateTime.MinValue,
                    Phone = u.Phone,
                    Address = u.Address,
                    ProfilePicture = u.ProfilePicture
                }),
                Info = new PaginationInfoDto
                {
                    TotalCount = totalCount,
                    Page = page,
                    PageSize = pageSize
                }
            };
        }
    }
}


=== File: backend/UserApi/Domain/Entities/User.cs ===
namespace UserApi.Domain.Entities;

public class User
{
    public Guid Id { get; set; }
    public string? FirstName { get; set; }
    public string? LastName { get; set; }
    public string? Email { get; set; }
    public DateTime? DateOfBirth { get; set; }
    public string? Phone { get; set; }
    public string? Address { get; set; }
    public string? ProfilePicture { get; set; }
}


=== File: backend/UserApi/Domain/Models/UserApiResponse.cs ===
namespace UserApi.Domain.Models
{
    public class UserApiResponse
    {
        public List<ApiUser>? Results { get; set; }
    }

    public class ApiUser
    {
        public ApiUserName? Name { get; set; }
        public string? Email { get; set; }
        public ApiUserDob? Dob { get; set; }
        public string? Phone { get; set; }
        public ApiUserLocation? Location { get; set; }
        public ApiUserPicture? Picture { get; set; }
    }

    public class ApiUserName
    {
        public string? Title { get; set; }
        public string? First { get; set; }
        public string? Last { get; set; }
    }

    public class ApiUserDob
    {
        public string? Date { get; set; }
    }

    public class ApiUserLocation
    {
        public string? City { get; set; }
        public string? State { get; set; }
    }

    public class ApiUserPicture
    {
        public string? Large { get; set; }
    }
}


=== File: backend/UserApi/Extenstions/ServiceCollectionExtensions.cs ===
using Microsoft.OpenApi.Models;
using UserApi.Infrastructure.Configurations;
using UserApi.Application.Interfaces;
using UserApi.Application.Services;
using UserApi.Infrastructure.Repositories;

namespace UserApi.Extentions
{
    public static class ServiceCollectionExtensions
    {
        public static void ConfigureServices(this IServiceCollection services, IConfiguration configuration)
        {
            // Configure database connection
            services.AddDbConfiguration(configuration);

            // Add controllers
            services.AddControllers();

            // Add application-specific services
            services.AddScoped<IUserRepository, UserRepository>();
            services.AddScoped<IUserService, UserService>();

            // Add HttpClient for external API calls
            services.AddHttpClient();

            // Add Swagger for API documentation
            services.AddEndpointsApiExplorer();
            services.AddSwaggerGen(options =>
            {
                options.SwaggerDoc("v1", new OpenApiInfo
                {
                    Title = "User API",
                    Version = "v1",
                    Description = "API to manage users and fetch data from the Random User Generator API."
                });
            });

            // Add CORS policy to allow requests from frontend
            services.AddCors(options =>
            {
                options.AddPolicy("AllowFrontend", policy =>
                {
                    policy.WithOrigins("http://localhost:3000") // Replace with your frontend URL
                          .AllowAnyMethod()
                          .AllowAnyHeader();
                });
            });
        }
    }
}


=== File: backend/UserApi/Infrastructure/Configurations/DbConfiguration.cs ===
using Microsoft.EntityFrameworkCore;
using UserApi.Infrastructure.DbContexts;

namespace UserApi.Infrastructure.Configurations
{
    public static class DbConfiguration
    {
        public static void AddDbConfiguration(this IServiceCollection services, IConfiguration configuration)
        {
            try
            {
                var connectionString = configuration.GetConnectionString("DefaultConnection");
                services.AddDbContext<ApplicationDbContext>(options =>
                    options.UseMySql(connectionString, ServerVersion.AutoDetect(connectionString)));

                Console.WriteLine("Database connection successful.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Database connection failed: {ex.Message}");
            }
        }
    }
}


=== File: backend/UserApi/Infrastructure/DbContext/ApplicationDbContext.cs ===
using Microsoft.EntityFrameworkCore;
using UserApi.Domain.Entities;

namespace UserApi.Infrastructure.DbContexts;

public class ApplicationDbContext : DbContext
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) { }

    public DbSet<User> Users { get; set; }
}


=== File: backend/UserApi/Infrastructure/Migrations/20250114154531_InitialCreate.Designer.cs ===
ï»¿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserApi.Infrastructure.DbContexts;

#nullable disable

namespace UserApi.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250114154531_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("UserApi.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}


=== File: backend/UserApi/Infrastructure/Migrations/ApplicationDbContextModelSnapshot.cs ===
ï»¿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserApi.Infrastructure.DbContexts;

#nullable disable

namespace UserApi.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("UserApi.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}


=== File: backend/UserApi/Infrastructure/Repositories/UserRepository.cs ===
using Microsoft.EntityFrameworkCore;
using UserApi.Infrastructure.DbContexts;
using UserApi.Application.Interfaces;
using UserApi.Domain.Entities;

namespace UserApi.Infrastructure.Repositories
{
    public class UserRepository : IUserRepository
    {
        private readonly ApplicationDbContext _context;
        private readonly ILogger<UserRepository> _logger;

        public UserRepository(ApplicationDbContext context, ILogger<UserRepository> logger)
        {
            _context = context;
            _logger = logger;
        }

        // Method to fetch a paginated list of users
        public async Task<IEnumerable<User>> GetUsersAsync(int page, int pageSize)
        {
            return await _context.Users
                .OrderBy(u => u.FirstName) // Ensure consistent ordering
                .Skip((page - 1) * pageSize)
                .Take(pageSize)
                .ToListAsync();
        }

        // Method to fetch a user by ID
        public async Task<User> GetUserByIdAsync(Guid id)
        {
            return await _context.Users.FindAsync(id);
        }

        // Method to search for users by name
        public async Task<IEnumerable<User>> SearchUsersAsync(string query)
        {
            return await _context.Users
                .Where(u => u.FirstName.Contains(query) || u.LastName.Contains(query))
                .ToListAsync();
        }

        // Method to save a batch of users to the database
        public async Task SaveUsersAsync(IEnumerable<User> users)
        {
            await _context.Users.AddRangeAsync(users);
            await _context.SaveChangesAsync();
        }

        // Method to get the total number of users in the database
        public async Task<int> GetTotalUserCountAsync()
        {
            var count = await _context.Users.CountAsync();
            return count;
        }


    }
}


=== File: backend/UserApi/WebApi/Controllers/UsersController.cs ===
using Microsoft.AspNetCore.Mvc;
using UserApi.Application.Interfaces;

namespace UserApi.WebApi.Controllers;

[ApiController]
[Route("api/[controller]")]
public class UsersController : ControllerBase
{
    private readonly IUserService _userService;

    public UsersController(IUserService userService)
    {
        _userService = userService;
    }

    [HttpGet]
    public async Task<IActionResult> GetUsers([FromQuery] int page = 1, [FromQuery] int pageSize = 10)
    {
        var response = await _userService.GetPaginatedUsersAsync(page, pageSize);
        return Ok(response);
    }

    [HttpGet("{id}")]
    public async Task<IActionResult> GetUserById(Guid id)
    {
        var user = await _userService.GetUserByIdAsync(id);
        if (user == null) return NotFound();
        return Ok(user);
    }

    [HttpGet("search")]
    public async Task<IActionResult> SearchUsers([FromQuery] string query)
    {
        var users = await _userService.SearchUsersAsync(query);
        return Ok(users);
    }

}


=== File: backend/UserApi/program.cs ===

using UserApi.Extentions;

var builder = WebApplication.CreateBuilder(args);

// Configure services
builder.Services.ConfigureServices(builder.Configuration);

// Build the app
var app = builder.Build();

// Configure middleware
app.ConfigureMiddleware();

app.Run();


