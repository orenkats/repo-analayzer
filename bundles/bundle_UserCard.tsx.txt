=== File: frontend/react_only/src/App.tsx ===
import React from "react";
import Layout from "./components/Layout";
import UsersPage from "./pages/UsersPage";

const App: React.FC = () => {
  return (
    <Layout>
      <UsersPage /> {/* Include the RandomUserPage */}
    </Layout>
  );
};

export default App;


=== File: frontend/react_only/src/components/Layout.tsx ===
import React from "react";

interface LayoutProps {
  children: React.ReactNode;
}

const Layout: React.FC<LayoutProps> = ({ children }) => {
  return (
    <div>
      <header>
        <h1>My App</h1>
      </header>
      <main>{children}</main>
      <footer>
        <p>Â© 2025 My App</p>
      </footer>
    </div>
  );
};

export default Layout;


=== File: frontend/react_only/src/components/Pagination.tsx ===
import React from "react";
import styles from "./pagination.module.scss";

interface PaginationProps {
  currentPage: number;
  totalPages: number;
  onPageChange: (page: number) => void;
}

const Pagination: React.FC<PaginationProps> = ({ currentPage, totalPages, onPageChange }) => {
  const pages = Array.from({ length: totalPages }, (_, i) => i + 1); // Generate an array of page numbers

  // Helper to get the button class based on state
  const getButtonClass = (isActive: boolean, isDisabled: boolean) => {
    if (isDisabled) return `${styles.paginationButton} ${styles.paginationButtonDisabled}`;
    if (isActive) return `${styles.paginationButton} ${styles.paginationButtonActive}`;
    return styles.paginationButton;
  };

  // Render a page button
  const renderPageButton = (page: number) => (
    <li key={page}>
      <button
        onClick={() => onPageChange(page)}
        className={getButtonClass(page === currentPage, false)}
      >
        {page}
      </button>
    </li>
  );

  // Render the Previous and Next buttons
  const renderPreviousButton = () => (
    <li>
      <button
        onClick={() => onPageChange(currentPage - 1)}
        disabled={currentPage === 1}
        className={getButtonClass(false, currentPage === 1)}
      >
        Previous
      </button>
    </li>
  );

  const renderNextButton = () => (
    <li>
      <button
        onClick={() => onPageChange(currentPage + 1)}
        disabled={currentPage === totalPages}
        className={getButtonClass(false, currentPage === totalPages)}
      >
        Next
      </button>
    </li>
  );

  return (
    <nav className={styles.paginationContainer}>
      <ul className={styles.paginationList}>
        {renderPreviousButton()}
        {pages.map(renderPageButton)}
        {renderNextButton()}
      </ul>
    </nav>
  );
};

export default Pagination;


=== File: frontend/react_only/src/components/UserCard.tsx ===
import React from "react";
import { User } from "../types/User";
import styles from "./userCard.module.scss";

interface UserCardProps {
  user: User;
}

const UserCard: React.FC<UserCardProps> = ({ user }) => {
  // Helper function to render user details
  const renderDetails = () => (
    <>
      <h2 className={styles.userName}>
        {user.firstName} {user.lastName} 
      </h2>
      <p className={styles.userEmail}>Email: {user.email}</p>
      <p className={styles.userGender}>Gender: {user.dateOfBirth}</p>
    </>
  );

  return (
    <div className={styles.userCard}>
      <img
        src={user.profilePicture}
        alt={`${user.address} ${user.phone}`}
        className={styles.userImage}
      />
      {renderDetails()}
    </div>
  );
};

export default UserCard;


=== File: frontend/react_only/src/hooks/useFetchUsers.ts ===
import { useQuery } from "@tanstack/react-query";
import { fetchUsers } from "../services/UserService";
import { UserResponse } from "../types/User";

const useFetchUsers = (page: number, pageSize: number) => {
  return useQuery<UserResponse, Error>({
    queryKey: ["users", page, pageSize],
    queryFn: () => fetchUsers(page, pageSize),
    staleTime: 5000, // Ensures fresh data is fetched on each query
  });
};

export default useFetchUsers;


=== File: frontend/react_only/src/index.tsx ===
import React from "react";
import ReactDOM from "react-dom/client";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import App from "./App";

const queryClient = new QueryClient();

const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
root.render(
  <React.StrictMode>
    <QueryClientProvider client={queryClient}>
      <App />
    </QueryClientProvider>
  </React.StrictMode>
);


=== File: frontend/react_only/src/pages/UsersPage.tsx ===
import React, { useState } from "react";
import useFetchUsers from "../hooks/useFetchUsers";
import UserCard from "../components/UserCard";
import Pagination from "../components/Pagination";
import styles from "./UsersPage.module.scss"; 

const UsersPage: React.FC = () => {
  const [currentPage, setCurrentPage] = useState(1); // State for current page
  const usersPerPage = 10; // Number of users per page

  // Fetch users based on the current page
  const { data, isLoading, error } = useFetchUsers(currentPage, usersPerPage);

  if (isLoading) return <p className={styles.message}>Loading...</p>;
  if (error) return <p className={styles.message}>Error: {error.message}</p>;
  if (!data?.info?.totalCount) {
    return <p className={styles.message}>No data available</p>;
  }

  // Calculate total pages from the API response
  const totalPages = Math.ceil(data.info.totalCount / usersPerPage);

  return (
    <div className={styles.pageContainer}>
      <h1 className={styles.pageTitle}>Users</h1>
      <div className={styles.usersGrid}>
        {data.results.map((user, index) => (
          <UserCard key={index} user={user} />
        ))}
      </div>
      <Pagination
        currentPage={currentPage}
        totalPages={totalPages}
        onPageChange={(page) => setCurrentPage(page)}
      />
    </div>
  );
};

export default UsersPage;


=== File: frontend/react_only/src/services/UserService.ts ===
import api from "./api";
import { UserResponse , User} from "../types/User";

export const fetchUsers = async (page: number, pageSize: number): Promise<UserResponse> => {
  const response = await api.get(`/users?page=${page}&pageSize=${pageSize}`);
  return response.data;
};

// Optional: Add more functions for searching and fetching user details
export const searchUsers = async (query: string): Promise<UserResponse> => {
  const response = await api.get(`/users/search?query=${query}`);
  return response.data;
};

export const getUserById = async (id: string): Promise<User> => {
  const response = await api.get(`/users/${id}`);
  return response.data;
};


=== File: frontend/react_only/src/services/api.ts ===
import axios from "axios";

// Create an Axios instance
const api = axios.create({
  baseURL: "http://localhost:5175/api", // Updated to backend API
  timeout: 5000, // Optional: Set a timeout for requests
  headers: {
    "Content-Type": "application/json",
  },
});

export default api;


=== File: frontend/react_only/src/types/User.ts ===
export interface User {
  id: string;
  firstName: string;
  lastName: string;
  email: string;
  dateOfBirth: string;
  phone: string;
  address: string;
  profilePicture: string;
}

export interface UserResponse {
  results: User[];
  info: {
    totalCount: number; // Updated for backend response
    page: number;
    pageSize: number;
  };
}


